October 12:

Task1:

1. rules for creating variables in python

2. /   //  %  ** differenct between operators  


October 13:

Task1:

create integer try convert to float/bool/string
create float try convert to int/bool/string
create bool try convert to float/int/string
create string try convert to float/bool/int

Task2:

Difference between compiler and interpreter

Task3:

Difference between python 2 and python3

Task4:

Difference between functional programming and oop


October 15:

Task1 :

simple interest p * n * r /100
get p value n value and r value from user
p ===< integer
n ===> float
r ===> float

Output format ===> string format


Task2 :

Area of cone: 1/3 * pi * r ^2 * h

pi = 3.14
get r from user (float)
get height from user (int)

print output in integer format ==> formatted way


Task3:

even / odd
postivie / negative
prime number / composite number
factorial
fibonacci series
armstrong numbe
square/ cube or power
floor div/ ceil divison
palindrome
add /sub / mul/ div
factors or multiples of a number

3 ==> 1,3
25 ===> 1,5,25
30 ==> 1,2,3,5,6,15,30

Task4:

variable ===> "computer_science"

identify forward and reverse index value for below values
i
t
_
n
m

write code for this also


Task5:


"computer_science"

extract: (all ways)

science
computer
_sci
puter
cien

October 18:

Tasks:

value1 = "Information_Technology"

print(value1[-5:5]) 
print(value1[5:-5])
print(value1[5:-5:1])
print(value1[-5:5:1])
print(value1[5:-5:-1])
print(value1[-5:5:-1])
print(value1[5:-5:5])
print(value1[-5:5:-5])
print(value1[5:-5:-5])
print(value1[-5:5:5])
print(value1[-3:3]) 
print(value1[3:-3])
print(value1[3:-3:1])
print(value1[-3:3:1])
print(value1[3:-3:-1])
print(value1[-3:3:-1])
print(value1[3:-3:3])
print(value1[-3:3:-3])
print(value1[3:-3:-3])
print(value1[-3:3:3])

October 19:

Tasks:

string_name: "Welcome_to_python"


print(value1[-5:5]) 
print(value1[5:-5])
print(value1[5:-5:1])
print(value1[-5:5:1])
print(value1[5:-5:-1])
print(value1[-5:5:-1])
print(value1[5:-5:5])
print(value1[-5:5:-5])
print(value1[5:-5:-5])
print(value1[-5:5:5])
print(value1[-3:3]) 
print(value1[3:-3])
print(value1[3:-3:1])
print(value1[-3:3:1])
print(value1[3:-3:-1])
print(value1[-3:3:-1])
print(value1[3:-3:3])
print(value1[-3:3:-3])
print(value1[3:-3:-3])
print(value1[-3:3:3])
print(var[::1])
print(var[::2])
print(var[::3])
print(var[::-1])
print(var[::-2])
print(var[::-3])
print(var[:8:2])
print(var[:8:-2])
print(var[8::2])
print(var[8::-2])
print(var[:-6:2])
print(var[:-6:-2])
print(var[-6::2])
print(var[-6::-2])


October 22

Task1:

#collect one string from user
#Identify middle character of the string

Task2:

a = ["python", "groovy", "hello"]

extract:
ll
vy
on
py
ello

October 25:

Difference between list tuple set dictionary
insertion sort merge sort bubble sort  ===> Tim sort

October 26:

#nested list

a = [1,2,3,4,5,[101,102,103,105,[201,202,203,204,[304,305,305,"python",["groovy"],[20,21],[31,32],[41,42]]]]]

print(a)
print(type(a))

#305
#202
#41
#oovy
#yth
#32
#42
#20
#4
#105


October 28:

Set methods:

isdisjoint 
issuperset
issubset

Dictionary methods:

October 29:

Task1:

List

#Create an empty list (two ways)
#Concatenate with [5,6,7,8]
#add 8,9,1,5,6,7,8,1 elements to that list
#Find frequency of 8 (count)
#find the mean of the list
#find sum (List) + min + Max 
#Find median of the list
#remove duplicates from list and give output in the format of tuple

Task2: Tuple

#Create two tuples (1,4,5,6,7,8) (5,6,7,8,9)
#Find the common elements between two tuples
#Concatenate both tuples and remove duplicates from tuple
#Find the index value of 9 (after concatenation)
#multiply above elements 3 times

Task3: Sets

#Create two empty sets
#update set1 with 7,8,9,1,2,3,4,5,0
#update set2 with 4,5,6,0
#check whether set2 is subset of set1 or no ?
#check whether both have common elements are no ?
#remove 8 from set 1 and set 2 ==> find the inferences
#discard 0 from set1 and set2 
#find collection of both sets ===> set1 and set2

Task4:

 Dictionary:

#create a dictionary
#{1:["english","maths","science"], 2:[10,20,30], 3:["bio-botany","bio-zoology","Algebra"]}
#Extract "bobtn" from above dictionary
#Extract "arbeg" from above dictionary
#print all keys in dictionary and convert it into tuple
#Find the average of all numbers available under key "2"

Task5

Difference between list tuple set dictionary

November 1:

Task1:

Get one string from user:

python  ====> ptoyhn
java  ===> jvaa
groovy  ===> govroy


Task2:

"python_is_using_interpreter"

#[-2:0:-1]
#[5:-5:5]
#[-5:5:-5]
#[5:-5:-5]
#[3:9:-1]
#[9:-10:-2]
#[2:-4:-4]
#[-4:2:-2]
#[0:-1:-3]
#[-3:3:6]
#[::-3]
#[::-2]
#[2:-2:-2]
#[2:-2:2]
#[5:-5:5]
#[3:-3:3]
#[::2]
#[::-5]

#Task3:

string1:  master
string2:  python

Output:  mason  (Concatenation of first part of string1 + second part od string 2)


string1: encyclopedia
string2: social

output: encyclal


#Task4:

string1: animal
string2: hello

output:   nael

string1: india
string2: python

output: niyo

#Task5:

Get two strings from user

string1: wikipedia
string2: typescript

Identify middle characters

output: p  +  c   ===> ascii value of p + ascii value of c  ====>  198


Task6:

string1: python
String2: java

output ===> jythonpava64hv

swap first letters of both strings and add + length of str1 + length of str2 + middle char of str1 + middle char of str2

Task7:

string1: ***python***
string1: **python********
string1: ********java*******

Extra special characters: * # % & $
output: python  (strip method )
https://www.w3schools.com/python/ref_string_strip.asp

Task8:

Collect two integers from user
int1: 123
int2: 456

output: 123456579 


Task9:
Collect one string and integer from user

String1: python  ==> h  ===> ascii value (ascii value for middle character)
Int1: 100  ==> D  ==> actual char from ascii value

Clues: Chr and ord inbuilt function for ascii conversions

string1 ==> middle character's ascii value
int ===> letter

105D


Task10: (name<space>float)

Collect three strings from user

string1: "ravi 10.30"  
string2: "meghala 12.19"
string3: "Gokul 20.20"

split + indexing

10.30 + 12.19 + 20.20 ===> output ===> round (42.69000) 5 decimal places should be

https://www.w3schools.com/python/ref_string_strip.asp


November 3:

Task1:


https://www.hackerrank.com/challenges/py-if-else/problem

Task2:

https://www.hackerrank.com/challenges/write-a-function/problem


Task3:

#Find median of the list

a = [1,2,3,4,0,9,8,7]
b = [1,2,3,4,0,9,8,7,10]


Task4:

Get a number from user check whether postive or negative
Get a number from user check whether odd or even
Get a character from user check whether small case or upper case
Get list from user check whether length is odd or even ([1,2,3,4,0,9,8,7] and [1,2,3,4,0,9,8,7,10])


#task5:
#Get one string from user
#extract middle letter of the string
#check whether middle letter is vowel or no

#task6: (ord and chr functions)
#Get one string from user
#Find the middle letter
#find ascii value for the middle letter
#check whether ascii value is odd or even

#task7:
#get one string from user
#check whether length of the string is odd or even

#task8:
#Get one string from user
#check whether string is palindrome or no

#task9:
#Get one mark from student
#mark 0 to 100 otherwise invalid mark

#50 + PASS otherwise FAIL
#90 to 100 ===> A  ==> Even + Odd -
#80 to 89 ===> B
#70 to 79 ===> C
#60 to 69 ===> D
#50 to 59 ===> E

#0 to 49 ===> FAIL


#93 ===> A-
#99 ===> A-
#88 ====> B+

#78

#VALID MARK
#PASS MARK
#C+

Task10:

#Using Range function  print multiples of 5 from 0 to 75
#Using Range function  print multiples of 8 from 0 to 72

#Using Range function  print multiples of 5 from 75 to 0
#Using Range function  print multiples of 8 from 96 to 72









